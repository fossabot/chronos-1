import ActivityTableRecord from "../models/activity";
import { DefiniteTimeRange, TimeRange } from "../models/time";

/** Object representing a segment of web browsing activity stored in DB */
export interface ActivityTableRecord {
  id?: number; // auto-generated by DB
  domain: string;
  path: string;
  startTime: number;
  endTime: number;
}

/** Object representing a domain & its metadata stored in DB */
export interface DomainTableRecord {
  id: string; // domain
  favIconUrl: string;
}

/** Object representing a title stored in DB */
export interface TitleTableRecord {
  id: string; // url
  title: string;
}

export interface DatabaseRecords {
  activity: ActivityTableRecord[];
  domain: DomainTableRecord[];
  title: TitleTableRecord[];
}

/** Service for interacting with activity records */
export interface ActivityService {
  /**
   * Creates & stores an activity record
   * @param url activity URL
   * @param favIconUrl page favicon URL
   * @param title page title
   * @param startTime activity start time in milliseconds
   * @param endTime activity end time in milliseconds
   * @returns ID of the created record
   */
  createActivityRecord(
    url: string,
    favIconUrl: string,
    title: string,
    startTime: number,
    endTime: number
  ): Promise<number>;

  /**
   * Deletes a list of activity records
   * @param recordId List of activity records IDs to be deleted
   */
  deleteActivityRecords(recordIds: number[]): Promise<void>;

  /**
   * Fetches all visited domains found in activity records
   * @returns Collection of all visited domains
   */
  fetchAllActivityDomains(): Promise<Record<string, Domain>>;

  /**
   * Fetches all stored activity records
   * @returns Collection of all activity records
   */
  fetchAllActivityRecords(): Promise<Activity[]>;

  /**
   * Fetches all stored activity records that matches the query
   * @returns Collection of activity records
   */
  fetchActivityRecords(query: TimeRange): Promise<Activity[]>;

  /**
   * Fetches time range of all stored activity records
   * @returns Time Range composed of `startTime` of the oldest activity record
   * & the current time
   */
  fetchActivityTimeRange(): Promise<DefiniteTimeRange | null>;
}

/** Service for interacting with activity records */
export interface DataMigrationService {
  /**
   * Export all table records in database
   * @returns object containing all records keyed by their respective table name
   */
  exportDatabaseRecords(): Promise<DatabaseRecords>;

  /**
   * Import table records into database (overwrites existing records)
   */
  importDatabaseRecords(records: DatabaseRecords): void;
}
